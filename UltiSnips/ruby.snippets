global !p
from snippet_helper import className
endglobal

snippet cl "class ... end"
class ${1:`!p snip.rv = className(snip.basename)`} ${2:inheritance}
  ${0}
end
endsnippet

snippet test "test"
test '${1:sampleTest}' do
  ${0}
end
endsnippet

snippet ae "assert_equal"
assert_equal '${1:expected}', ${2:actual}
endsnippet

snippet mod "module"
module `!p snip.rv = className(os.path.basename(os.path.realpath('.')))`
  class ${1:`!p snip.rv = className(snip.basename)`} ${2:inheritance}
    ${0}
  end
end
endsnippet

snippet self "def self. ... end"
def self.${1:methodName}(${2:Attibutes})
  ${0}
end
endsnippet

snippet accessor
attr_accessor(${1:accessors})${0}
endsnippet

snippet auto
autoload :${1:ClassName}, '`!p snip.rv = os.path.basename(os.path.realpath('.'))`/${2:file_name}'
endsnippet

snippet '
'${1:pattern}'
endsnippet

snippet giv
Given(/^${1:regexp}$/) do
	${2:pendig}
end
endsnippet

#####################################################
#			For cucumber							#
#####################################################

##
# Given, When, Then with regular expression formating
##

snippet gr
Given /^${1:regexp}$/ do |input|
	${3:pending}
end
endsnippet

snippet wr
When(/^${1:regexp}$/) do ${2:|i|}
	${3:pending}
end
endsnippet

snippet tr
Then(/^${1:regexp}$/) do ${2:|i|}
	${3:pending}
end
endsnippet

##
# Given, When and Then only
##

snippet w 
When ${1}	
endsnippet

snippet g 
Given ${1}	
endsnippet

snippet t 
Then ${1}	
endsnippet
